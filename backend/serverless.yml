service: watercooler-express

frameworkVersion: ">=1.2.0 <2.0.0"

provider:
  name: aws
  region: us-west-2
  runtime: python3.6

  stage: ${opt:stage}

  environment:
    USERS_TABLE: ${opt:stage}-users
    MATCHES_TABLE: ${opt:stage}-matches

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${opt:stage}-*"

functions:
  ping:
    handler: handlers/presence.endpoint
    events:
      - http:
          path: ping
          method: get

  auth:
    handler: handlers/auth.endpoint
    environment:
      OAUTH_ID: ${env:OAUTH_ID}
      OAUTH_SECRET: ${env:OAUTH_SECRET}
      DYNAMODB_TABLE_PREFIX: ${opt:stage}
    events:
      - http:
          path: auth
          method: get

plugins:
  - serverless-domain-manager
  - serverless-python-requirements

resources:
  # DynamoDB
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.USERS_TABLE}
        AttributeDefinitions:
          - AttributeName: team_id
            AttributeType: S
          - AttributeName: user_id
            AttributeType: S
        KeySchema:
          - AttributeName: team_id
            KeyType: HASH
          - AttributeName: user_id
            KeyType: RANGE
        # Set the capacity to auto-scale
        BillingMode: PAY_PER_REQUEST
    
    MatchesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.MATCHES_TABLE}
        AttributeDefinitions:
          - AttributeName: team_id
            AttributeType: S
          - AttributeName: user_id
            AttributeType: S
        KeySchema:
          - AttributeName: team_id
            KeyType: HASH
          - AttributeName: user_id
            KeyType: RANGE
        # Set the capacity to auto-scale
        BillingMode: PAY_PER_REQUEST

custom:
  stage: ${opt:stage, self:provider.stage}
  # Set the table name here so we can use it while testing locally

  pythonRequirements:
    dockerizePip: false

  customDomain:
    domainName: watercooler.express
    basePath: '' # This will be prefixed to all routes
    stage: ${self:provider.stage}
    createRoute53Record: true